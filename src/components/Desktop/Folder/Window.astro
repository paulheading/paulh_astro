---
const { class: className, dummy = false, size = "sm" } = Astro.props;

var topbar_padding = "0.625rem";

var close_padding = "0.625rem";

if (size == "lg") {
  topbar_padding = "1rem";
  close_padding = "0.75rem";
}

const windowProps = {
  "data-state": Astro.props["data-state"],
  class: "window " + className,
};

const closeProps = {
  class: "close",
  title: "close",
};

let vars = {
  topbar_padding,
  close_padding,
};
---

<div {...windowProps}>
  <div class="topbar">
    {
      dummy ? (
        <div {...closeProps}>close</div>
      ) : (
        <button {...closeProps}>close</button>
      )
    }
  </div>
  <div class="content">
    <slot />
  </div>
</div>

<style lang="scss" define:vars={vars}>
  @use "~mixins" as *;

  .window {
    border-radius: $border-radius-lg;
    box-shadow: $box-shadow-window;
    min-width: 6.25rem;
    overflow: hidden;
    max-width: 40rem;
    color: $c-gray-6;
  }

  .window[data-state="closed"] {
    display: none;
  }

  .topbar {
    padding: var(--topbar_padding);
    background-color: $c-gray-5;
    display: flex;
    gap: 0.75rem;
  }

  .close {
    padding: var(--close_padding);
    background-color: $c-red;
    border-radius: 50%;
    font-size: 0;
    color: black;
    border: 0;
  }

  button.close {
    @include focus {
      background-color: $c-darkred;
    }
  }

  button.close:active {
    transform: scale(0.8);
  }

  .content {
    background-color: white;
  }
</style>
